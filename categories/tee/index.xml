<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tee - Category - 呆呆的小窝~</title>
        <link>https://0xdaidai.github.io/categories/tee/</link>
        <description>Tee - Category - 呆呆的小窝~</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 25 Sep 2023 11:38:20 &#43;0800</lastBuildDate><atom:link href="https://0xdaidai.github.io/categories/tee/" rel="self" type="application/rss+xml" /><item>
    <title>Optee_template</title>
    <link>https://0xdaidai.github.io/optee_template/</link>
    <pubDate>Mon, 25 Sep 2023 11:38:20 &#43;0800</pubDate>
    <author>0xdaidai</author>
    <guid>https://0xdaidai.github.io/optee_template/</guid>
    <description><![CDATA[<h2 id="ta">ta</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">//------------------------------------------------
</span></span></span><span class="line"><span class="cl"><span class="c1">//--- 010 Editor v10.0.2 Binary Template
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">//      File:
</span></span></span><span class="line"><span class="cl"><span class="c1">//   Authors:
</span></span></span><span class="line"><span class="cl"><span class="c1">//   Version:
</span></span></span><span class="line"><span class="cl"><span class="c1">//   Purpose:
</span></span></span><span class="line"><span class="cl"><span class="c1">//  Category:
</span></span></span><span class="line"><span class="cl"><span class="c1">// File Mask:
</span></span></span><span class="line"><span class="cl"><span class="c1">//  ID Bytes:
</span></span></span><span class="line"><span class="cl"><span class="c1">//   History:
</span></span></span><span class="line"><span class="cl"><span class="c1">//------------------------------------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define TEE_FS_HTREE_IV_SIZE 16
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TEE_FS_HTREE_TAG_SIZE 16
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TEE_FS_HTREE_FEK_SIZE 16
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_tee_fs_htree_meta</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">UINT64</span> <span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">tee_fs_htree_meta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_tee_fs_htree_imeta</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">tee_fs_htree_meta</span> <span class="n">meta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">UINT32</span> <span class="n">max_node_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">UINT32</span> <span class="n">nop</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">tee_fs_htree_imeta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_tee_fs_htree_image</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">UCHAR</span> <span class="n">iv</span><span class="p">[</span><span class="n">TEE_FS_HTREE_IV_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">UCHAR</span> <span class="n">tag</span><span class="p">[</span><span class="n">TEE_FS_HTREE_TAG_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">UCHAR</span> <span class="n">enc_fek</span><span class="p">[</span><span class="n">TEE_FS_HTREE_FEK_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">UCHAR</span> <span class="n">imeta</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">tee_fs_htree_imeta</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">	<span class="n">UINT32</span> <span class="n">counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">tee_fs_htree_image</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define TEE_FS_HTREE_HASH_SIZE		32
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TEE_FS_HTREE_IV_SIZE 16
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TEE_FS_HTREE_TAG_SIZE 16
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_tee_fs_htree_node_image</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="cm">/* Note that calc_node_hash() depends on hash first in struct */</span>
</span></span><span class="line"><span class="cl">	<span class="n">UCHAR</span> <span class="n">hash</span><span class="p">[</span><span class="n">TEE_FS_HTREE_HASH_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">UCHAR</span> <span class="n">iv</span><span class="p">[</span><span class="n">TEE_FS_HTREE_IV_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">UCHAR</span> <span class="n">tag</span><span class="p">[</span><span class="n">TEE_FS_HTREE_TAG_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">USHORT</span> <span class="n">flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">tee_fs_htree_node_image</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//--------------------------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">LittleEndian</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">tee_fs_htree_image</span>  <span class="n">ver0_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">tee_fs_htree_image</span>  <span class="n">ver1_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">FSeek</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">tee_fs_htree_node_image</span> <span class="n">ver0_root_node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">tee_fs_htree_node_image</span> <span class="n">ver1_root_node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">FSeek</span><span class="p">(</span><span class="mh">0x2000</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="encrypted-ta">encrypted ta</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">//------------------------------------------------
</span></span></span><span class="line"><span class="cl"><span class="c1">//--- 010 Editor v10.0.2 Binary Template
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">//      File:
</span></span></span><span class="line"><span class="cl"><span class="c1">//   Authors:
</span></span></span><span class="line"><span class="cl"><span class="c1">//   Version:
</span></span></span><span class="line"><span class="cl"><span class="c1">//   Purpose:
</span></span></span><span class="line"><span class="cl"><span class="c1">//  Category:
</span></span></span><span class="line"><span class="cl"><span class="c1">// File Mask:
</span></span></span><span class="line"><span class="cl"><span class="c1">//  ID Bytes:
</span></span></span><span class="line"><span class="cl"><span class="c1">//   History:
</span></span></span><span class="line"><span class="cl"><span class="c1">//------------------------------------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">enum</span> <span class="n">shdr_img_type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SHDR_TA</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">SHDR_BOOTSTRAP_TA</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">SHDR_ENCRYPTED_TA</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define SHDR_MAGIC      0x4f545348
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * struct shdr - signed header
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @magic:      magic number must match SHDR_MAGIC
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @img_type:   image type, values defined by enum shdr_img_type
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @img_size:   image size in bytes
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @algo:       algorithm, defined by public key algorithms TEE_ALG_*
</span></span></span><span class="line"><span class="cl"><span class="cm"> *              from TEE Internal API specification
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @hash_size:  size of the signed hash
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @sig_size:   size of the signature
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @hash:       hash of an image
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @sig:        signature of @hash
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">shdr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UINT32</span> <span class="n">magic</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">UINT32</span> <span class="n">img_type</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">UINT32</span> <span class="n">img_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">UINT32</span> <span class="n">algo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">USHORT</span> <span class="n">hash_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">USHORT</span> <span class="n">sig_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">         * Commented out element used to visualize the layout dynamic part
</span></span></span><span class="line"><span class="cl"><span class="cm">         * of the struct.
</span></span></span><span class="line"><span class="cl"><span class="cm">         *
</span></span></span><span class="line"><span class="cl"><span class="cm">         * hash is accessed through the macro SHDR_GET_HASH and
</span></span></span><span class="line"><span class="cl"><span class="cm">         * signature is accessed through the macro SHDR_GET_SIG
</span></span></span><span class="line"><span class="cl"><span class="cm">         *
</span></span></span><span class="line"><span class="cl"><span class="cm">         * UCHAR hash[hash_size];
</span></span></span><span class="line"><span class="cl"><span class="cm">         * UCHAR sig[sig_size];
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * struct shdr_bootstrap_ta - bootstrap TA subheader
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @uuid:       UUID of the TA
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @ta_version: Version of the TA
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">shdr_bootstrap_ta</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UCHAR</span> <span class="n">uuid</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">UINT32</span> <span class="n">ta_version</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * struct shdr_encrypted_ta - encrypted TA header
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @enc_algo:   authenticated encyption algorithm, defined by symmetric key
</span></span></span><span class="line"><span class="cl"><span class="cm"> *              algorithms TEE_ALG_* from TEE Internal API
</span></span></span><span class="line"><span class="cl"><span class="cm"> *              specification
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @flags:      authenticated encyption flags
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @iv_size:    size of the initialization vector
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @tag_size:   size of the authentication tag
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @iv:         initialization vector
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @tag:        authentication tag
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">shdr_encrypted_ta</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UINT32</span> <span class="n">enc_algo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">UINT32</span> <span class="n">flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">USHORT</span> <span class="n">iv_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">USHORT</span> <span class="n">tag_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">         * Commented out element used to visualize the layout dynamic part
</span></span></span><span class="line"><span class="cl"><span class="cm">         * of the struct.
</span></span></span><span class="line"><span class="cl"><span class="cm">         *
</span></span></span><span class="line"><span class="cl"><span class="cm">         * iv is accessed through the macro SHDR_ENC_GET_IV and
</span></span></span><span class="line"><span class="cl"><span class="cm">         * tag is accessed through the macro SHDR_ENC_GET_TAG
</span></span></span><span class="line"><span class="cl"><span class="cm">         *
</span></span></span><span class="line"><span class="cl"><span class="cm">         * UCHAR iv[iv_size];
</span></span></span><span class="line"><span class="cl"><span class="cm">         * UCHAR tag[tag_size];
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define SHDR_ENC_KEY_TYPE_MASK  0x1
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">enum</span> <span class="n">shdr_enc_key_type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SHDR_ENC_KEY_DEV_SPECIFIC</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">SHDR_ENC_KEY_CLASS_WIDE</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define HASH_SIZE   32
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TAG_SIZE    16
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SIG_SIZE    256
</span></span></span><span class="line"><span class="cl"><span class="cp">#define IV_SIZE     12
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">nonce = &lt;unique random value&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">ciphertext, tag = AES_GCM(&lt;stripped ELF&gt;)
</span></span></span><span class="line"><span class="cl"><span class="cm">hash = H(&lt;struct shdr&gt; || &lt;struct shdr_bootstrap_ta&gt; ||
</span></span></span><span class="line"><span class="cl"><span class="cm">         &lt;struct shdr_encrypted_ta&gt; || &lt;nonce&gt; || &lt;tag&gt; || &lt;stripped ELF&gt;)
</span></span></span><span class="line"><span class="cl"><span class="cm">signature = RSA-Sign(&lt;hash&gt;)
</span></span></span><span class="line"><span class="cl"><span class="cm">encrypted_binary = &lt;struct shdr&gt; || &lt;hash&gt; || &lt;signature&gt; ||
</span></span></span><span class="line"><span class="cl"><span class="cm">                   &lt;struct shdr_bootstrap_ta&gt; ||
</span></span></span><span class="line"><span class="cl"><span class="cm">                   &lt;struct shdr_encrypted_ta&gt; || &lt;nonce&gt; || &lt;tag&gt; ||
</span></span></span><span class="line"><span class="cl"><span class="cm">                   &lt;ciphertext&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">LittleEndian</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">shdr</span> <span class="n">head_shdr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">UCHAR</span> <span class="n">hash</span><span class="p">[</span><span class="n">HASH_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="n">UCHAR</span> <span class="n">sig</span><span class="p">[</span><span class="n">SIG_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="n">shdr_bootstrap_ta</span> <span class="n">bootstrap_ta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">shdr_encrypted_ta</span> <span class="n">encrypted_ta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">UCHAR</span> <span class="n">nonce</span><span class="p">[</span><span class="n">IV_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="n">UCHAR</span> <span class="n">tag</span><span class="p">[</span><span class="n">TAG_SIZE</span><span class="p">];</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="decrypt-script">decrypt script</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">from</span> <span class="n">cryptography</span><span class="p">.</span><span class="n">hazmat</span><span class="p">.</span><span class="n">primitives</span><span class="p">.</span><span class="n">ciphers</span><span class="p">.</span><span class="n">aead</span> <span class="n">import</span> <span class="n">AESGCM</span>
</span></span><span class="line"><span class="cl"><span class="n">import</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="n">import</span> <span class="n">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="err">&#39;</span><span class="n">rb</span><span class="err">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">shdr</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">magic</span><span class="p">,</span> <span class="n">img_type</span><span class="p">,</span> <span class="n">img_size</span><span class="p">,</span> <span class="n">algo</span><span class="p">,</span> <span class="n">digest_len</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">sig_len</span><span class="p">)</span> <span class="o">=</span> <span class="k">struct</span><span class="p">.</span><span class="nf">unpack</span><span class="p">(</span><span class="err">&#39;</span><span class="o">&lt;</span><span class="n">IIIIHH</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">shdr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># private key
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">key</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">b64d239b1f3c7d3b06506229cd8ff7c8af2bb4db2168621ac62c84948468c4f4</span><span class="err">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="cp"># 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">hash</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sig</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">shdr_bootstrap_ta</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">shdr_encrypted_ta</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nonce</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">tag</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cipher</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">cipher</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">print</span><span class="p">(</span><span class="n">f</span><span class="s">&#34;nonce: {nonce}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nf">print</span><span class="p">(</span><span class="n">f</span><span class="s">&#34;tag: {tag}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gcm</span> <span class="o">=</span> <span class="nf">AESGCM</span><span class="p">(</span><span class="n">bytes</span><span class="p">.</span><span class="nf">fromhex</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">plain</span> <span class="o">=</span> <span class="n">gcm</span><span class="p">.</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">nonce</span><span class="p">,</span> <span class="n">cipher</span><span class="o">+</span><span class="n">tag</span><span class="p">,</span> <span class="n">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="err">&#39;</span><span class="n">dec</span><span class="p">.</span><span class="n">ta</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="n">wb</span><span class="err">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">plain</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ida">ida</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="kt">size_t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">enum</span> <span class="n">TEEC_ParamType</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_NONE</span> <span class="o">=</span> <span class="mh">0x0</span><span class="p">,</span>  <span class="cm">/* unused parameter */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_VALUE_INPUT</span> <span class="o">=</span> <span class="mh">0x01</span><span class="p">,</span>  <span class="cm">/* input type of value, refer TEEC_Value */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_VALUE_OUTPUT</span> <span class="o">=</span> <span class="mh">0x02</span><span class="p">,</span> <span class="cm">/* output type of value, refer TEEC_Value */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_VALUE_INOUT</span> <span class="o">=</span> <span class="mh">0x03</span><span class="p">,</span>  <span class="cm">/* value is used as both input and output, refer TEEC_Value */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_MEMREF_TEMP_INPUT</span> <span class="o">=</span> <span class="mh">0x05</span><span class="p">,</span>  <span class="cm">/* input type of temp memory reference, refer TEEC_TempMemoryReference */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_MEMREF_TEMP_OUTPUT</span> <span class="o">=</span> <span class="mh">0x06</span><span class="p">,</span> <span class="cm">/* output type of temp memory reference, refer TEEC_TempMemoryReference */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_MEMREF_TEMP_INOUT</span> <span class="o">=</span> <span class="mh">0x07</span><span class="p">,</span>  <span class="cm">/* temp memory reference used as both input and output,
</span></span></span><span class="line"><span class="cl"><span class="cm">                                       refer TEEC_TempMemoryReference */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_ION_INPUT</span> <span class="o">=</span> <span class="mh">0x08</span><span class="p">,</span>  <span class="cm">/* input type of icon memory reference, refer TEEC_IonReference */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_ION_SGLIST_INPUT</span> <span class="o">=</span> <span class="mh">0x09</span><span class="p">,</span> <span class="cm">/* input type of ion memory block reference, refer TEEC_IonSglistReference */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_MEMREF_SHARED_INOUT</span> <span class="o">=</span> <span class="mh">0x0a</span><span class="p">,</span> <span class="cm">/* no copy mem */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_MEMREF_WHOLE</span> <span class="o">=</span> <span class="mh">0xc</span><span class="p">,</span> <span class="cm">/* use whole memory block, refer TEEC_RegisteredMemoryReference */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_MEMREF_PARTIAL_INPUT</span> <span class="o">=</span> <span class="mh">0xd</span><span class="p">,</span> <span class="cm">/* input type of memory reference, refer TEEC_RegisteredMemoryReference */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_MEMREF_PARTIAL_OUTPUT</span> <span class="o">=</span> <span class="mh">0xe</span><span class="p">,</span> <span class="cm">/* output type of memory reference, refer TEEC_RegisteredMemoryReference */</span>
</span></span><span class="line"><span class="cl">    <span class="n">TEEC_MEMREF_PARTIAL_INOUT</span> <span class="o">=</span> <span class="mh">0xf</span> <span class="cm">/* memory reference used as both input and output,
</span></span></span><span class="line"><span class="cl"><span class="cm">                                        refer TEEC_RegisteredMemoryReference */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">TEE_VALUE_Param</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">TEE_MEMREF_Param</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="o">*</span><span class="n">buffer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">union</span> <span class="n">TEE_Param</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">TEE_VALUE_Param</span> <span class="n">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">TEE_MEMREF_Param</span> <span class="n">memref</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
</channel>
</rss>
